module.exports = {
    '@typescript-eslint/array-type': [
        'error',
        { default: 'array-simple', readonly: 'array-simple' },
    ],
    '@typescript-eslint/ban-ts-comment': [
        'error',
        {
            'ts-expect-error': 'allow-with-description',
            'ts-ignore': true,
            'ts-nocheck': true,
            'ts-check': false,
            'minimumDescriptionLength': 10,
        },
    ],
    '@typescript-eslint/consistent-type-assertions': [
        'error',
        {
            assertionStyle: 'as',
            objectLiteralTypeAssertions: 'allow-as-parameter',
        },
    ],
    // '@typescript-eslint/naming-convention': [
    //     'warn',
    //     {
    //         selector: 'default',
    //         format: ['camelCase'],
    //         leadingUnderscore: 'forbid',
    //         trailingUnderscore: 'forbid',
    //     },
    //     {
    //         selector: 'variable',
    //         modifiers: ['const'],
    //         format: ['camelCase', 'UPPER_CASE'],
    //         leadingUnderscore: 'allowSingleOrDouble',
    //         trailingUnderscore: 'allowDouble',
    //     },
    //     {
    //         selector: ['classProperty', 'typeProperty'],
    //         modifiers: ['readonly'],
    //         format: ['camelCase', 'UPPER_CASE'],
    //         leadingUnderscore: 'allow',
    //         trailingUnderscore: 'allow',
    //     },
    //     {
    //         selector: 'enumMember',
    //         format: ['UPPER_CASE'],
    //         leadingUnderscore: 'forbid',
    //         trailingUnderscore: 'forbid',
    //     },
    //     {
    //         selector: 'typeLike',
    //         format: ['PascalCase'],
    //         leadingUnderscore: 'forbid',
    //         trailingUnderscore: 'forbid',
    //     },
    //     {
    //         selector: ['parameter', 'parameterProperty'],
    //         format: ['camelCase'],
    //         leadingUnderscore: 'allow',
    //         trailingUnderscore: 'forbid',
    //     },
    // ],
    '@typescript-eslint/consistent-type-imports': [
        'error',
        { prefer: 'type-imports', disallowTypeAnnotations: true },
    ],
    'dot-notation': 'off',
    '@typescript-eslint/dot-notation': 'error',
    '@typescript-eslint/explicit-member-accessibility': 'error',
    '@typescript-eslint/no-base-to-string': [
        'error',
        { ignoredTypeNames: ['RegExp', 'URL', 'URLSearchParams'] },
    ],
    '@typescript-eslint/no-dynamic-delete': 'error',
    '@typescript-eslint/no-explicit-any': 'warn',
    '@typescript-eslint/no-inferrable-types': 'off',
    '@typescript-eslint/no-require-imports': 'warn',
    'no-shadow': 'off',
    '@typescript-eslint/no-shadow': 'error',
    '@typescript-eslint/no-this-alias': 'error',
    '@typescript-eslint/no-unsafe-argument': 'error',
    'no-unused-vars': 'off',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/prefer-includes': 'warn',
    '@typescript-eslint/prefer-literal-enum-member': 'error',
    '@typescript-eslint/prefer-nullish-coalescing': 'error',
    '@typescript-eslint/prefer-optional-chain': 'warn',
    '@typescript-eslint/prefer-readonly': 'warn',
    '@typescript-eslint/prefer-reduce-type-parameter': 'warn',
    '@typescript-eslint/prefer-ts-expect-error': 'warn',
    '@typescript-eslint/prefer-string-starts-ends-with': 'error',
    '@typescript-eslint/restrict-template-expressions': [
        'error',
        {
            allowNumber: true,
            allowBoolean: false,
            allowAny: false,
            allowNullish: false,
        },
    ],
    '@typescript-eslint/require-array-sort-compare': [
        'error',
        { ignoreStringArrays: true },
    ],
    '@typescript-eslint/typedef': [
        'warn',
        {
            arrayDestructuring: true,
            arrowParameter: false,
            memberVariableDeclaration: true,
            objectDestructuring: false,
            parameter: true,
            propertyDeclaration: true,
            variableDeclaration: true,
            variableDeclarationIgnoreFunction: true,
        },
    ],
};
