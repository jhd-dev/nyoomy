# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddTagInput {
  color: CategoryColor
  description: String
  icon: CategoryIcon
  label: String!
  taggedItem: TaggableInput
}

input AddTodoInput {
  description: String
  isArchived: Boolean
  repeatWeekdays: [Weekday!]
  title: String
}

"""Colors a user may associate with a category/tag"""
enum CategoryColor {
  BLUE
  DEFAULT
  GREEN
  RED
  YELLOW
}

"""The icons available to accompany category/tag titles"""
enum CategoryIcon {
  GLOBE
  ROCKET
  STAR
  WATER
}

type Chat {
  createdAt: DateTime!
  id: ID!
  isArchived: Boolean!
  members: User!
}

type CounterMetric {
  id: ID!
  interval: Int!
  maximum: Int!
  metric: Metric!
  metricType: MetricType!
  minimum: Int!
}

type DailyFloatMetric {
  id: ID!
  max: Float!
  metric: Metric!
  metricType: MetricType!
  min: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EditMessageInput {
  content: String!
  messageId: Float!
}

type FieldError {
  field: String!
  message: String!
}

type Journal {
  dailyWordGoal: Int!
  id: ID!
  isArchived: Boolean!
  user: User!
}

type LoginResponse {
  error: String
  user: SafeUser
}

type Message {
  chat: Chat!
  content: String!
  edittedAt: DateTime!
  id: ID!
  sender: User!
  sentAt: DateTime!
}

type Metric {
  description: String!
  id: ID!
  isArchived: Boolean!
  taggable: Taggable!
  title: String!
  user: User!
}

"""The types of metrics a user can create"""
enum MetricType {
  COUNTER
  FLOAT
  JOURNAL
  SCALE
  SELECTION
  STRING
  TIMER
}

type Mutation {
  addTodo(input: AddTodoInput!): Todo
  applyTag(tagId: ID!, taggableId: ID!): Tag
  createTag(tagInput: AddTagInput!): Tag
  deleteMessage(messageId: ID!): Boolean
  deleteTag(tagId: ID!): Boolean!
  deleteTodo(id: ID!): Boolean!
  deleteUser: Boolean!
  deleteUserById(id: ID!): Boolean!
  editMessage(input: EditMessageInput!): Message
  login(input: UserLoginInput!): LoginResponse
  logout: Boolean!
  registerUser(input: RegisterUserInput!): RegistrationResponse!
  sendMessageToChat(input: SendMessageToChatInput!): Message
  sendMessageToUser(input: SendMessageToUserInput!): Message
  updateTag(updateInput: UpdateTagInput!): Tag
  updateTodo(updateInput: UpdateTodoInput!): Todo
  updateUserPassword(input: UpdatePasswordInput!): Boolean!
}

type Query {
  getMyTodos(excludeArchived: Boolean!): [Todo!]!
  me: User
  myChats(excludeArchived: Boolean!): [Chat!]!
  myTags: [Tag!]!
  users: [User!]
}

"""User registration data"""
input RegisterUserInput {
  displayName: String!
  email: String!
  password: String!
  username: String!
}

type RegistrationResponse {
  errors: [FieldError!]
  user: SafeUser
}

"""User data excluding authentication-unsafe fields"""
type SafeUser {
  createdAt: DateTime!
  email: String!
  googleId: String!
  id: ID!
  isEmailVerified: Boolean!
  stars: Int!
  username: String!
}

"""A Numeric Rating Scale"""
type Scale {
  id: ID!
  max: Int!
  metric: Metric!
  metricType: MetricType!
  min: Int!
}

type SelectionCategory {
  id: ID!
  metric: SelectionMetric!
  title: String!
}

type SelectionEntry {
  datetime: DateTime!
  id: ID!
  metric: SelectionMetric!
  selectedOptions: [SelectionOption!]!
}

"""A Numeric Rating Selection"""
type SelectionMetric {
  id: ID!
  maxSelections: Int!
  metric: Metric!
  metricType: MetricType!
  minSelections: Int!
}

type SelectionOption {
  category: SelectionCategory!
  id: ID!
  metric: SelectionMetric!
  selectingEntries: [SelectionEntry!]!
  title: String!
}

input SendMessageToChatInput {
  chatId: Float!
  content: String!
}

input SendMessageToUserInput {
  content: String!
  recipientId: String!
}

type Tag {
  color: CategoryColor!
  description: String!
  icon: CategoryIcon
  id: ID!
  isArchived: Boolean!
  label: String!
  user: User!
}

type Taggable {
  id: ID!
  tags: [Tag!]!
}

input TaggableInput {
  id: ID!
}

type TimerMetric {
  goalLength: Int!
  goalPerDay: Int!
  id: ID!
  metric: Metric!
  metricType: MetricType!
}

type Todo {
  description: String!
  doesRepeat: Boolean!
  id: ID!
  isArchived: Boolean!
  isCompleted: Boolean!
  repeatWeekdays: [Weekday!]!
  subtasks: [Todo!]!
  supertask: Todo
  title: String!
  user: User!
}

input UpdatePasswordInput {
  newPassword: String!
  oldPassword: String!
  username: String!
}

input UpdateTagInput {
  applyTaggables: [TaggableInput!] = []
  color: CategoryColor
  description: String
  icon: CategoryIcon
  id: ID!
  label: String
  removeTaggables: [TaggableInput!] = []
  taggables: [TaggableInput!]
}

input UpdateTodoInput {
  date: String!
  description: String
  id: ID!
  isArchived: Boolean
  isCompleted: Boolean
  repeatWeekdays: [Weekday!]
  title: String
}

"""Centralized user reference"""
type User {
  createdAt: DateTime!
  email: String!
  googleId: String!
  id: ID!
  isEmailVerified: Boolean!
  stars: Int!
  username: String!
}

input UserLoginInput {
  passwordInput: String!
  usernameOrEmail: String!
}

"""The days of the week"""
enum Weekday {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}
