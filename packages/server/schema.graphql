"""Centralized user reference"""
type User {
  id: ID!
  username: String!
  email: String!
  isEmailVerified: Boolean!
  googleId: String!
  createdAt: DateTime!
  stars: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Tag {
  id: ID!
  user: User!
  taggedItems: [Taggable!]!
  title: String!
  icon: CategoryIcon
}

"""The icons available to accompany category/tag titles"""
enum CategoryIcon {
  GLOBE
  STAR
  WATER
  ROCKET
}

type Taggable {
  id: ID!
  tags: [Tag!]!
}

type Metric {
  id: ID!
  taggable: Taggable!
  user: User!
  title: String!
  description: String!
  isArchived: Boolean!
}

type CounterMetric {
  id: ID!
  metric: Metric!
  metricType: MetricType!
  maximum: Int!
  minimum: Int!
  interval: Int!
}

"""The types of metrics a user can create"""
enum MetricType {
  COUNTER
  TIMER
  JOURNAL
  SCALE
  SELECTION
  FLOAT
  STRING
}

type DailyFloatMetric {
  id: ID!
  metric: Metric!
  metricType: MetricType!
  max: Float!
  min: Float!
}

type Journal {
  id: ID!
  metric: Metric!
  metricType: MetricType!
  dailyWordGoal: Int!
  isArchived: Boolean!
}

"""A Numeric Rating Scale"""
type Scale {
  id: ID!
  metric: Metric!
  metricType: MetricType!
  min: Int!
  max: Int!
}

"""A Numeric Rating Selection"""
type SelectionMetric {
  id: ID!
  metric: Metric!
  metricType: MetricType!
  minSelections: Int!
  maxSelections: Int!
}

type SelectionCategory {
  id: ID!
  metric: SelectionMetric!
  title: String!
}

type SelectionOption {
  id: ID!
  metric: SelectionMetric!
  selectingEntries: [SelectionEntry!]!
  category: SelectionCategory!
  title: String!
}

type SelectionEntry {
  id: ID!
  metric: SelectionMetric!
  selectedOptions: [SelectionOption!]!
  datetime: DateTime!
}

type TimerMetric {
  id: ID!
  metric: Metric!
  metricType: MetricType!
  goalLength: Int!
  goalPerDay: Int!
}

type Todo {
  id: ID!
  subtasks: [Todo!]!
  user: User!
  title: String!
  description: String!
  isCompleted: Boolean!
  isArchived: Boolean!
  repeatWeekdays: [Weekday!]!
  doesRepeat: Boolean!
}

"""The days of the week"""
enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

"""User data excluding authentication-unsafe fields"""
type SafeUser {
  id: ID!
  username: String!
  email: String!
  isEmailVerified: Boolean!
  googleId: String!
  createdAt: DateTime!
  stars: Int!
}

type LoginResponse {
  user: SafeUser
  error: String
}

type FieldError {
  field: String!
  message: String!
}

type RegistrationResponse {
  errors: [FieldError!]
  user: SafeUser
}

type Query {
  me: User
}

type Mutation {
  login(input: UserLoginInput!): LoginResponse
  logout: Boolean!
  registerUser(input: RegisterUserInput!): RegistrationResponse!
  deleteUserById(id: ID!): Boolean!
  deleteUser: Boolean!
  updateUserPassword(input: UpdatePasswordInput!): Boolean!
}

input UserLoginInput {
  usernameOrEmail: String!
  passwordInput: String!
}

"""User registration data"""
input RegisterUserInput {
  displayName: String!
  email: String!
  username: String!
  password: String!
}

input UpdatePasswordInput {
  username: String!
  oldPassword: String!
  newPassword: String!
}
